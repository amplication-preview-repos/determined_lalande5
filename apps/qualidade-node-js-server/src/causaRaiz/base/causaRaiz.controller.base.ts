/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CausaRaizService } from "../causaRaiz.service";
import { CausaRaizCreateInput } from "./CausaRaizCreateInput";
import { CausaRaiz } from "./CausaRaiz";
import { CausaRaizFindManyArgs } from "./CausaRaizFindManyArgs";
import { CausaRaizWhereUniqueInput } from "./CausaRaizWhereUniqueInput";
import { CausaRaizUpdateInput } from "./CausaRaizUpdateInput";

export class CausaRaizControllerBase {
  constructor(protected readonly service: CausaRaizService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CausaRaiz })
  async createCausaRaiz(
    @common.Body() data: CausaRaizCreateInput
  ): Promise<CausaRaiz> {
    return await this.service.createCausaRaiz({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CausaRaiz] })
  @ApiNestedQuery(CausaRaizFindManyArgs)
  async causaRaizs(@common.Req() request: Request): Promise<CausaRaiz[]> {
    const args = plainToClass(CausaRaizFindManyArgs, request.query);
    return this.service.causaRaizs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CausaRaiz })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async causaRaiz(
    @common.Param() params: CausaRaizWhereUniqueInput
  ): Promise<CausaRaiz | null> {
    const result = await this.service.causaRaiz({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CausaRaiz })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCausaRaiz(
    @common.Param() params: CausaRaizWhereUniqueInput,
    @common.Body() data: CausaRaizUpdateInput
  ): Promise<CausaRaiz | null> {
    try {
      return await this.service.updateCausaRaiz({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CausaRaiz })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCausaRaiz(
    @common.Param() params: CausaRaizWhereUniqueInput
  ): Promise<CausaRaiz | null> {
    try {
      return await this.service.deleteCausaRaiz({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
