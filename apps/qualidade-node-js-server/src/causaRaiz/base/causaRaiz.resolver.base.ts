/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CausaRaiz } from "./CausaRaiz";
import { CausaRaizCountArgs } from "./CausaRaizCountArgs";
import { CausaRaizFindManyArgs } from "./CausaRaizFindManyArgs";
import { CausaRaizFindUniqueArgs } from "./CausaRaizFindUniqueArgs";
import { DeleteCausaRaizArgs } from "./DeleteCausaRaizArgs";
import { CausaRaizService } from "../causaRaiz.service";
@graphql.Resolver(() => CausaRaiz)
export class CausaRaizResolverBase {
  constructor(protected readonly service: CausaRaizService) {}

  async _causaRaizsMeta(
    @graphql.Args() args: CausaRaizCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CausaRaiz])
  async causaRaizs(
    @graphql.Args() args: CausaRaizFindManyArgs
  ): Promise<CausaRaiz[]> {
    return this.service.causaRaizs(args);
  }

  @graphql.Query(() => CausaRaiz, { nullable: true })
  async causaRaiz(
    @graphql.Args() args: CausaRaizFindUniqueArgs
  ): Promise<CausaRaiz | null> {
    const result = await this.service.causaRaiz(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CausaRaiz)
  async deleteCausaRaiz(
    @graphql.Args() args: DeleteCausaRaizArgs
  ): Promise<CausaRaiz | null> {
    try {
      return await this.service.deleteCausaRaiz(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
