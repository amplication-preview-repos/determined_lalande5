/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CausaRaiz as PrismaCausaRaiz } from "@prisma/client";

export class CausaRaizServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CausaRaizCountArgs, "select">
  ): Promise<number> {
    return this.prisma.causaRaiz.count(args);
  }

  async causaRaizs(
    args: Prisma.CausaRaizFindManyArgs
  ): Promise<PrismaCausaRaiz[]> {
    return this.prisma.causaRaiz.findMany(args);
  }
  async causaRaiz(
    args: Prisma.CausaRaizFindUniqueArgs
  ): Promise<PrismaCausaRaiz | null> {
    return this.prisma.causaRaiz.findUnique(args);
  }
  async createCausaRaiz(
    args: Prisma.CausaRaizCreateArgs
  ): Promise<PrismaCausaRaiz> {
    return this.prisma.causaRaiz.create(args);
  }
  async updateCausaRaiz(
    args: Prisma.CausaRaizUpdateArgs
  ): Promise<PrismaCausaRaiz> {
    return this.prisma.causaRaiz.update(args);
  }
  async deleteCausaRaiz(
    args: Prisma.CausaRaizDeleteArgs
  ): Promise<PrismaCausaRaiz> {
    return this.prisma.causaRaiz.delete(args);
  }
}
