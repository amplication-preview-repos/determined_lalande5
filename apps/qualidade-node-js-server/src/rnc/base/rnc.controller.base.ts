/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RncService } from "../rnc.service";
import { RncCreateInput } from "./RncCreateInput";
import { Rnc } from "./Rnc";
import { RncFindManyArgs } from "./RncFindManyArgs";
import { RncWhereUniqueInput } from "./RncWhereUniqueInput";
import { RncUpdateInput } from "./RncUpdateInput";

export class RncControllerBase {
  constructor(protected readonly service: RncService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Rnc })
  async createRnc(@common.Body() data: RncCreateInput): Promise<Rnc> {
    return await this.service.createRnc({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Rnc] })
  @ApiNestedQuery(RncFindManyArgs)
  async rncs(@common.Req() request: Request): Promise<Rnc[]> {
    const args = plainToClass(RncFindManyArgs, request.query);
    return this.service.rncs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Rnc })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rnc(@common.Param() params: RncWhereUniqueInput): Promise<Rnc | null> {
    const result = await this.service.rnc({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Rnc })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRnc(
    @common.Param() params: RncWhereUniqueInput,
    @common.Body() data: RncUpdateInput
  ): Promise<Rnc | null> {
    try {
      return await this.service.updateRnc({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Rnc })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRnc(
    @common.Param() params: RncWhereUniqueInput
  ): Promise<Rnc | null> {
    try {
      return await this.service.deleteRnc({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
