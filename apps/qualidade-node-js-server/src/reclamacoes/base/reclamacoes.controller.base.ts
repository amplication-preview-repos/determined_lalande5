/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReclamacoesService } from "../reclamacoes.service";
import { ReclamacoesCreateInput } from "./ReclamacoesCreateInput";
import { Reclamacoes } from "./Reclamacoes";
import { ReclamacoesFindManyArgs } from "./ReclamacoesFindManyArgs";
import { ReclamacoesWhereUniqueInput } from "./ReclamacoesWhereUniqueInput";
import { ReclamacoesUpdateInput } from "./ReclamacoesUpdateInput";

export class ReclamacoesControllerBase {
  constructor(protected readonly service: ReclamacoesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Reclamacoes })
  async createReclamacoes(
    @common.Body() data: ReclamacoesCreateInput
  ): Promise<Reclamacoes> {
    return await this.service.createReclamacoes({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Reclamacoes] })
  @ApiNestedQuery(ReclamacoesFindManyArgs)
  async reclamacoesItems(
    @common.Req() request: Request
  ): Promise<Reclamacoes[]> {
    const args = plainToClass(ReclamacoesFindManyArgs, request.query);
    return this.service.reclamacoesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Reclamacoes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reclamacoes(
    @common.Param() params: ReclamacoesWhereUniqueInput
  ): Promise<Reclamacoes | null> {
    const result = await this.service.reclamacoes({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Reclamacoes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReclamacoes(
    @common.Param() params: ReclamacoesWhereUniqueInput,
    @common.Body() data: ReclamacoesUpdateInput
  ): Promise<Reclamacoes | null> {
    try {
      return await this.service.updateReclamacoes({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Reclamacoes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReclamacoes(
    @common.Param() params: ReclamacoesWhereUniqueInput
  ): Promise<Reclamacoes | null> {
    try {
      return await this.service.deleteReclamacoes({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
